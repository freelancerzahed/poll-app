[{"D:\\My test project\\pool-app\\src\\components\\poll-form\\index.jsx":"1","D:\\My test project\\pool-app\\src\\App.js":"2","D:\\My test project\\pool-app\\src\\components\\sidebar\\index.jsx":"3","D:\\My test project\\pool-app\\src\\components\\main-content\\index.jsx":"4","D:\\My test project\\pool-app\\src\\components\\main-content\\participate-form.jsx":"5","D:\\My test project\\pool-app\\src\\components\\main-content\\opiniouns.jsx":"6","D:\\My test project\\pool-app\\src\\components\\poll-form\\poll-form.jsx":"7","D:\\My test project\\pool-app\\src\\index.js":"8"},{"size":4477,"mtime":1607708652613,"results":"9","hashOfConfig":"10"},{"size":3088,"mtime":1607746747931,"results":"11","hashOfConfig":"10"},{"size":1773,"mtime":1607695258527,"results":"12","hashOfConfig":"10"},{"size":2080,"mtime":1607708252904,"results":"13","hashOfConfig":"10"},{"size":5200,"mtime":1607699067722,"results":"14","hashOfConfig":"10"},{"size":913,"mtime":1607706982949,"results":"15","hashOfConfig":"10"},{"size":3524,"mtime":1607708255668,"results":"16","hashOfConfig":"10"},{"size":500,"mtime":1606274603626,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"8bmw7j",{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\My test project\\pool-app\\src\\components\\poll-form\\index.jsx",["37"],"import React, { Component } from 'react'\r\nimport shortid from 'shortid';\r\nimport FormJsx from './poll-form'\r\nconst defaultOption = [\r\n\r\n    { id: shortid.generate(), value: '', vote: 0 },\r\n    { id: shortid.generate(), value: '', vote: 0 },\r\n\r\n]\r\n\r\nclass PollForm extends Component {\r\n    state = {\r\n        title: '',\r\n        description: '',\r\n        options: defaultOption,\r\n        errors: {}\r\n    }\r\n    componentDidMount() {\r\n        const { poll } = this.props;\r\n        if (poll && Object.keys(poll).length > 0) {\r\n            this.setState({\r\n                title: poll.title,\r\n                description: poll.description,\r\n                options: poll.options\r\n            })\r\n        }\r\n    }\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    handleOptionsChange = (event, index) => {\r\n        const options = [...this.state.options]\r\n        options[index].value = event.target.value\r\n        this.setState({ options })\r\n    }\r\n    createOption = () => {\r\n        const { options } = this.state\r\n        if (options.length < 5) {\r\n            options.push({\r\n                id: shortid.generate(),\r\n                value: '',\r\n                vote: 0\r\n            })\r\n            this.setState(\r\n                {\r\n                    options\r\n                }\r\n            )\r\n        } else {\r\n            alert(`you can max 5 options`)\r\n        }\r\n    }\r\n    deleteOption = index => {\r\n        const { options } = this.state;\r\n        if (options.length > 2) {\r\n            options.splice(index, 1);\r\n            this.setState({ options });\r\n        }\r\n\r\n    }\r\n\r\n    handleSubmit = event => {\r\n       \r\n        event.preventDefault()\r\n        const { isValid, errors } = this.validate()\r\n        if (isValid) {\r\n            const { title, description, options } = this.state;\r\n            const poll = {\r\n                title, description, options\r\n            }\r\n            if (this.props.isUpdate) {\r\n                poll.id = this.props.poll.id;\r\n                this.props.submit(poll)\r\n              \r\n\r\n            }else{\r\n                this.props.submit(poll)\r\n                event.target.reset();\r\n                this.setState({\r\n                    title: '',\r\n                    description: '',\r\n                    options: defaultOption,\r\n                    errors: {}\r\n                })\r\n              \r\n            }\r\n           \r\n        } else {\r\n            this.setState({ errors })\r\n        }\r\n       \r\n    }\r\n    validate = () => {\r\n        const errors = {}\r\n        const { title, description, options } = this.state;\r\n        if (!title) {\r\n            errors.title = 'Please provite a title !';\r\n        } else if (title.length < 20) {\r\n            errors.title = \"Title is so short\"\r\n        } else if (title.length > 100) {\r\n            errors.title = 'Title is too long'\r\n        }\r\n        if (!description) {\r\n            errors.description = 'Please provite a description !';\r\n        } else if (description.length < 100) {\r\n            errors.description = 'Description is so short'\r\n        } else if (description.length > 1000) {\r\n            errors.description = \"description is too long\"\r\n        }\r\n        const optionErrors = [];\r\n        options.forEach((opt, index) => {\r\n            if (!opt.value) {\r\n                optionErrors[index] = 'Option text empty'\r\n            } else if (opt.length > 100) {\r\n                optionErrors[index] = 'Option text is too long'\r\n            }\r\n        })\r\n        if (optionErrors.length > 0) {\r\n            errors.options = optionErrors\r\n        }\r\n        return { errors, isValid: Object.keys(errors).length == 0 }\r\n    }\r\n    render() {\r\n        const { title, description, options, errors } = this.state\r\n        return (\r\n            <div>\r\n                <FormJsx\r\n                    title={title}\r\n                    description={description}\r\n                    options={options}\r\n                    errors={errors}\r\n                    handleChange={this.handleChange}\r\n                    handleOptionsChange={this.handleOptionsChange}\r\n                    createOption={this.createOption}\r\n                    buttonValue={this.props.buttonValue || 'Create New Poll'}\r\n                    deleteOption={this.deleteOption}\r\n                    handleSubmit={this.handleSubmit}\r\n\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PollForm","D:\\My test project\\pool-app\\src\\App.js",["38","39","40","41","42","43"],"D:\\My test project\\pool-app\\src\\components\\sidebar\\index.jsx",[],"D:\\My test project\\pool-app\\src\\components\\main-content\\index.jsx",["44"],"D:\\My test project\\pool-app\\src\\components\\main-content\\participate-form.jsx",["45"],"import React, { Component } from 'react';\r\nimport { Button, CustomInput, Form, FormFeedback, FormGroup, Input, Label } from 'reactstrap'\r\n\r\nclass ParticipateForm extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        selectedOption: '',\r\n        errors: {}\r\n    }\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { errors, isValide } = this.validte();\r\n        if (isValide) {\r\n            this.props.getOpinion({\r\n                pollId: this.props.poll.id,\r\n                name: this.state.name,\r\n                selectedOption: this.state.selectedOption\r\n            })\r\n            event.target.reset()\r\n            this.setState({\r\n                name: '',\r\n                selectedOption: '',\r\n                errors: {}\r\n            })\r\n        } else {\r\n\r\n            this.setState({ errors })\r\n        }\r\n    }\r\n\r\n    validte = () => {\r\n\r\n        const errors = {}\r\n        if (!this.state.name) {\r\n            errors.name = 'Please provide a name'\r\n        } else if (this.state.name.length > 20) {\r\n            errors.name = 'name is too long'\r\n        }\r\n        if (!this.state.selectedOption) {\r\n            errors.selectedOption = 'please select a option'\r\n        }\r\n        return {\r\n            errors,\r\n            isValide: Object.keys(errors).length == 0\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <div className='d-flex'>\r\n                        <h4>Options</h4>\r\n                        <Button\r\n                            color='warning'\r\n                            type='button'\r\n                            className='ml-auto'\r\n                            onClick={this.props.toggleModal}\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                        <Button\r\n                            type='button'\r\n                            className='ml-auto'\r\n                            onClick={() => this.props.deletePoll(this.props.poll.id)}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </div>\r\n                    {\r\n                        this.props.poll.options.map(opt => (\r\n                            <FormGroup className='my-2' key={opt.id}>\r\n                                <Label className='d-flex'>\r\n                                    <CustomInput\r\n                                        type='radio'\r\n                                        id={opt.id}\r\n                                        name='selectedOption'\r\n                                        value={opt.id}\r\n                                        onChange={this.handleChange}\r\n                                        invalid={this.state.errors.selectedOption ? true : false}\r\n                                    />\r\n                                    {opt.value}\r\n                                    <span\r\n                                        style={{\r\n                                            padding: '5px 10px',\r\n                                            background: 'green',\r\n                                            borderRadius: '5px',\r\n                                            color: 'white'\r\n                                        }}\r\n                                        className='ml-auto'\r\n                                    >\r\n                                        {opt.vote}\r\n                                    </span>\r\n                                    <span>\r\n                                        {\r\n                                            this.props.poll.totalVote > 0 ? (\r\n                                                (100 * opt.vote) / this.props.poll.totalVote\r\n                                            ).toFixed(2) : 0\r\n                                        }\r\n                                        %\r\n                                    </span>\r\n                                </Label>\r\n\r\n\r\n                            </FormGroup>\r\n\r\n                        )\r\n\r\n                        )\r\n\r\n                    }\r\n                    <FormGroup>\r\n                        <Label>\r\n                            <h3>Enter your Nmae</h3>\r\n                        </Label>\r\n                        <Input\r\n                            name='name'\r\n                            placeholder='md zahed'\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                            invalid={this.state.errors.name ? true : false}\r\n                        />\r\n                        {this.state.errors.name && <FormFeedback>{this.state.errors.name}</FormFeedback>}\r\n                    </FormGroup>\r\n                    <Button\r\n                        type='submit'\r\n\r\n                    >\r\n                        Submit your opinion\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ParticipateForm;\r\n","D:\\My test project\\pool-app\\src\\components\\main-content\\opiniouns.jsx",[],["46","47"],"D:\\My test project\\pool-app\\src\\components\\poll-form\\poll-form.jsx",[],"D:\\My test project\\pool-app\\src\\index.js",[],{"ruleId":"48","severity":1,"message":"49","line":123,"column":62,"nodeType":"50","messageId":"51","endLine":123,"endColumn":64},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"48","severity":1,"message":"49","line":35,"column":39,"nodeType":"50","messageId":"51","endLine":35,"endColumn":41},{"ruleId":"48","severity":1,"message":"49","line":45,"column":50,"nodeType":"50","messageId":"51","endLine":45,"endColumn":52},{"ruleId":"48","severity":1,"message":"49","line":58,"column":39,"nodeType":"50","messageId":"51","endLine":58,"endColumn":41},{"ruleId":"48","severity":1,"message":"49","line":59,"column":52,"nodeType":"50","messageId":"51","endLine":59,"endColumn":54},{"ruleId":"48","severity":1,"message":"49","line":73,"column":84,"nodeType":"50","messageId":"51","endLine":73,"endColumn":86},{"ruleId":"48","severity":1,"message":"49","line":20,"column":36,"nodeType":"50","messageId":"51","endLine":20,"endColumn":38},{"ruleId":"48","severity":1,"message":"49","line":50,"column":50,"nodeType":"50","messageId":"51","endLine":50,"endColumn":52},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-global-assign","no-unsafe-negation"]